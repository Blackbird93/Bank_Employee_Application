/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package banker.review;

import ConnectionPool.NewClass;
import ServerMessages.Messages;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author victor
 */
public class Transactions extends javax.swing.JFrame {

    private Connection con;
    private Statement st;
    private ResultSet rs;

    /**
     * Creates new form Transactions
     */
    public Transactions() {
        initComponents();
        customer_egn();
    }

    public void customer_egn() {
        try {
            String add1 = rs.getString(LoadCustomer.getEgn());
            ordererEgn.setText(add1);
        } catch (Exception ex) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        close = new javax.swing.JButton();
        OrderIbanField = new javax.swing.JTextField();
        transaction = new javax.swing.JButton();
        order = new javax.swing.JLabel();
        ordererEgn = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        amount = new javax.swing.JLabel();
        basis = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        basisArea = new javax.swing.JTextArea();
        amountField = new javax.swing.JTextField();
        recipienIbanField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        OrderIbanField1 = new javax.swing.JTextField();
        order1 = new javax.swing.JLabel();
        ordererEgn1 = new javax.swing.JTextField();
        basis1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        basisArea1 = new javax.swing.JTextArea();
        amount1 = new javax.swing.JLabel();
        amountField1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        recipienIbanField1 = new javax.swing.JTextField();
        transaction1 = new javax.swing.JButton();
        close1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        OrderIbanField4 = new javax.swing.JTextField();
        order4 = new javax.swing.JLabel();
        ordererEgn4 = new javax.swing.JTextField();
        basis2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        basisArea2 = new javax.swing.JTextArea();
        amount4 = new javax.swing.JLabel();
        amountField4 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        recipienIbanField2 = new javax.swing.JTextField();
        transaction2 = new javax.swing.JButton();
        close4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        OrderIbanField2 = new javax.swing.JTextField();
        ordererEgn2 = new javax.swing.JTextField();
        amountField2 = new javax.swing.JTextField();
        amount2 = new javax.swing.JLabel();
        order2 = new javax.swing.JLabel();
        withDraw = new javax.swing.JButton();
        close2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        OrderIbanField3 = new javax.swing.JTextField();
        order3 = new javax.swing.JLabel();
        ordererEgn3 = new javax.swing.JTextField();
        amount3 = new javax.swing.JLabel();
        amountField3 = new javax.swing.JTextField();
        insertCash = new javax.swing.JButton();
        close3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Действия със сметки");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                enableMenu(evt);
            }
        });

        close.setText("Отказ");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        transaction.setText("Извърши");
        transaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionActionPerformed(evt);
            }
        });

        order.setText("Поръчител: ");

        jLabel1.setText("ОТ:");

        amount.setText("Сума: ");

        basis.setText("Основание: ");

        basisArea.setColumns(20);
        basisArea.setRows(5);
        jScrollPane1.setViewportView(basisArea);

        jLabel7.setText("ДО: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(OrderIbanField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(amount)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(basis)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(transaction)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(close, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(recipienIbanField, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(order)
                            .addGap(21, 21, 21)
                            .addComponent(ordererEgn, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jLabel7)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OrderIbanField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(order)
                    .addComponent(ordererEgn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(basis)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amount)
                    .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(recipienIbanField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(close)
                    .addComponent(transaction))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Разплащателни", jPanel1);

        jLabel2.setText("ОТ:");

        order1.setText("Поръчител: ");

        basis1.setText("Основание: ");

        basisArea1.setColumns(20);
        basisArea1.setRows(5);
        jScrollPane2.setViewportView(basisArea1);

        amount1.setText("Сума: ");

        jLabel8.setText("ДО: ");

        transaction1.setText("Извърши");
        transaction1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transaction1ActionPerformed(evt);
            }
        });

        close1.setText("Отказ");
        close1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(OrderIbanField1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(amount1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(amountField1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(basis1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(transaction1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(close1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(recipienIbanField1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(order1)
                            .addGap(21, 21, 21)
                            .addComponent(ordererEgn1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jLabel8)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OrderIbanField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(order1)
                    .addComponent(ordererEgn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(basis1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amount1)
                    .addComponent(amountField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(recipienIbanField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(close1)
                    .addComponent(transaction1))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Спестовни", jPanel2);

        jLabel5.setText("ОТ:");

        order4.setText("Поръчител: ");

        basis2.setText("Основание: ");

        basisArea2.setColumns(20);
        basisArea2.setRows(5);
        jScrollPane3.setViewportView(basisArea2);

        amount4.setText("Сума: ");

        jLabel9.setText("ДО: ");

        transaction2.setText("Извърши");
        transaction2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transaction2ActionPerformed(evt);
            }
        });

        close4.setText("Отказ");
        close4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(OrderIbanField4, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(amount4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(amountField4, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(basis2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(transaction2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(close4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(recipienIbanField2, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(order4)
                            .addGap(21, 21, 21)
                            .addComponent(ordererEgn4, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(jLabel5))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jLabel9)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OrderIbanField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(order4)
                    .addComponent(ordererEgn4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(basis2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amount4)
                    .addComponent(amountField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(recipienIbanField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(close4)
                    .addComponent(transaction2))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Депозитни", jPanel3);

        jLabel3.setText("ОТ:");

        amount2.setText("Сума: ");

        order2.setText("Поръчител: ");

        withDraw.setText("Извърши");
        withDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withDrawActionPerformed(evt);
            }
        });

        close2.setText("Отказ");
        close2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(OrderIbanField2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                            .addComponent(amount2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(amountField2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(order2)
                            .addGap(21, 21, 21)
                            .addComponent(ordererEgn2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(jLabel3)))
                .addContainerGap(51, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(withDraw)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(close2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OrderIbanField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(order2)
                    .addComponent(ordererEgn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amount2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 197, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(close2)
                    .addComponent(withDraw))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Теглене от каса", jPanel4);

        jLabel4.setText("ОТ:");

        order3.setText("Поръчител: ");

        amount3.setText("Сума: ");

        insertCash.setText("Извърши");
        insertCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertCashActionPerformed(evt);
            }
        });

        close3.setText("Отказ");
        close3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(OrderIbanField3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                            .addComponent(amount3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(amountField3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(order3)
                            .addGap(21, 21, 21)
                            .addComponent(ordererEgn3, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(jLabel4)))
                .addContainerGap(51, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(insertCash)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(close3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OrderIbanField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(order3)
                    .addComponent(ordererEgn3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amount3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 197, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(close3)
                    .addComponent(insertCash))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Внасяне", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        Transactions.this.dispose();
    }//GEN-LAST:event_closeActionPerformed

    private void transactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionActionPerformed
        try {
            String orderCode, recipientCode;
            double orderRate, recipientRate, orderReverseRate, recipientReverseRate, orderBalance = 0.0,
                    recipientBalance = 0.0;
            boolean checkSum = false;

            String orderIban = OrderIbanField.getText().trim();
            String egn = ordererEgn.getText().trim();
            String basis = basisArea.getText().trim();
            String sum = amountField.getText().trim();
            String recIban = recipienIbanField.getText().trim();

            String orderer = "SELECT balance, exchange_rate_id FROM account_type_current WHERE "
                    + "iban_id='BG56MHLF49956638432019' and customer_list_id='9501044576' ";

            String recipient = "SELECT balance,exchange_rate_id FROM account_type_current WHERE "
                    + "iban_id='BG22LYWT41161502489387' ";

            //Vzimame kodoveta na valytite
            rs = NewClass.Vrazka.st.executeQuery(orderer);
            rs.next();
            orderCode = rs.getString("exchange_rate_id");
            orderBalance = Double.parseDouble(rs.getString("balance"));
            rs.close();

            rs = NewClass.Vrazka.st.executeQuery(recipient);
            rs.next();
            recipientCode = rs.getString("exchange_rate_id");
            recipientBalance = Double.parseDouble(rs.getString("balance"));
            rs.close();

            //Vzimane na  dannite za kyrs i obraten kyrs za dvete smetki
            rs = NewClass.Vrazka.st.executeQuery("SELECT * from exchange_rate WHERE "
                    + "code_id='" + orderCode + "'; ");
            rs.next();

            orderRate = Double.parseDouble(rs.getString("rate"));
            orderRate /= Double.parseDouble(rs.getString("ratio"));
            orderReverseRate = Double.parseDouble(rs.getString("reverse_rate"));
            rs.close();

            rs = NewClass.Vrazka.st.executeQuery("SELECT * from exchange_rate WHERE "
                    + "code_id='" + recipientCode + "' ;");
            rs.next();

            recipientRate = Double.parseDouble(rs.getString("rate"));
            recipientRate /= Double.parseDouble(rs.getString("ratio"));
            recipientReverseRate = Double.parseDouble(rs.getString("reverse_rate"));

            double test = Double.parseDouble(amountField.getText());
            sum = amountField.getText();

            if (orderBalance >= test) {
                checkSum = true;
            }
            System.out.println(checkSum);

            if (orderCode.equals(recipientCode)) {
                if (checkSum == true) {
                    String ordererDel = "UPDATE account_type_current SET balance=balance-'" + sum + "' WHERE "
                            + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                    NewClass.Vrazka.st.executeUpdate(ordererDel);

                    String transaction = "UPDATE account_type_current SET balance=balance+'" + sum + "' WHERE "
                            + "iban_id='" + recIban + "' ";
                    NewClass.Vrazka.st.executeUpdate(transaction);

                    String transactionInsert = "INSERT INTO transaction_list_current_current (execution_time, "
                            + "orderer_account_type_current_id, orderer_customer_list_id, basis, amount ,"
                            + "exchange_rate_id ,recipient_account_type_current_id) VALUES (SYSDATETIME() ,"
                            + " '" + orderIban + "' , '" + egn + "', '" + basis + "' , '" + sum + "' , '" + orderCode + "' ,"
                            + " '" + recIban + "')";
                    NewClass.Vrazka.st.executeUpdate(transactionInsert);
                    JOptionPane.showMessageDialog(null, " Transaction complited!  ");

                    String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                            + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                            + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                    NewClass.Vrazka.st.execute(history);

                    try {
                        PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                        out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " to " + recIban + ".");
                        out.flush();
                    } catch (Exception ex) {
                    }

                } else {
                    JOptionPane.showMessageDialog(null, " Balance not enought! ");
                }
            } else {
                if (orderCode.equals("BGN")) {
                    double total = recipientReverseRate * Double.parseDouble(amountField.getText());

                    String ordererDel = "UPDATE account_type_current SET balance=balance-'" + sum + "' WHERE "
                            + "iban_id='BG56MHLF49956638432019' and customer_list_id='9501044576' ";
                    NewClass.Vrazka.st.executeUpdate(ordererDel);

                    String transaction = "UPDATE account_type_current SET balance=balance+'" + total + "' WHERE "
                            + "iban_id='BG22LYWT41161502489387' ";
                    NewClass.Vrazka.st.executeUpdate(transaction);

                    String transactionInsert = "INSERT INTO transaction_list_current_current (execution_time, "
                            + "orderer_account_type_current_id, orderer_customer_list_id, basis, amount ,"
                            + "exchange_rate_id ,recipient_account_type_current_id) VALUES (SYSDATETIME() ,"
                            + " 'BG56MHLF49956638432019' , '9501044576', '" + basis + "' , '" + sum + "' , '" + orderCode + "' ,"
                            + " 'BG22LYWT41161502489387')";
                    NewClass.Vrazka.st.execute(transactionInsert);

                    JOptionPane.showMessageDialog(null, " Transaction complited! ");
                    String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                            + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                            + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                    NewClass.Vrazka.st.execute(history);

                    try {
                        PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                        out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " to " + recIban + ".");
                        out.flush();
                    } catch (Exception ex) {
                    }
                } else {
                    if (recipientCode.equals("BGN")) {
                        double total = orderRate * Double.parseDouble(amount.getText());

                        String ordererDel = "UPDATE account_type_current SET balance=balance-'" + sum + "' WHERE "
                                + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                        NewClass.Vrazka.st.executeUpdate(ordererDel);

                        String transaction = "UPDATE account_type_current SET balance=balance+'" + total + "' WHERE "
                                + "iban_id='" + recIban + "' ";
                        NewClass.Vrazka.st.executeUpdate(transaction);
                        JOptionPane.showMessageDialog(null, " Transaction complited! 3 ");
                        String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                                + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                                + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                        NewClass.Vrazka.st.execute(history);

                        try {
                            PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                            out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " to " + recIban + ".");
                            out.flush();
                        } catch (Exception ex) {
                        }
                    } else {
                        double levaBuff;
                        levaBuff = orderRate * Double.parseDouble(amount.getText());

                        String ordererDel = "UPDATE account_type_current SET balance=balance-'" + levaBuff + "' WHERE "
                                + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                        NewClass.Vrazka.st.executeUpdate(ordererDel);

                        String transaction = "UPDATE account_type_current SET balance=balance+'" + levaBuff + "' WHERE "
                                + "iban_id='" + recIban + "' ";
                        NewClass.Vrazka.st.executeUpdate(transaction);
                        JOptionPane.showMessageDialog(null, " Transaction complited! 4 ");

                        String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                                + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                                + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                        NewClass.Vrazka.st.execute(history);

                        try {
                            PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                            out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " to " + recIban + ".");
                            out.flush();
                        } catch (Exception ex) {
                        }
                    }
                }
            } // zatvarqne na if-a za ednakvost na valutite
            rs.close();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_transactionActionPerformed

    private void transaction1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transaction1ActionPerformed
        try {
            String orderCode, recipientCode;
            double orderRate, recipientRate, orderReverseRate, recipientReverseRate, orderBalance = 0.0,
                    recipientBalance = 0.0;
            boolean checkSum = false;

            String orderIban = OrderIbanField1.getText().trim();
            String egn = ordererEgn1.getText().trim();
            String basis = basisArea1.getText().trim();
            String sum = amountField1.getText().trim();
            String recIban = recipienIbanField1.getText().trim();

            String orderer = "SELECT balance, exchange_rate_id FROM account_type_current WHERE "
                    + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
            rs = NewClass.Vrazka.st.executeQuery(orderer);

            int count = 0;
            while (rs.next()) {
                count = count + 1;
            }
            if (count == 1) {
                String recipient = "SELECT balance,exchange_rate_id FROM account_type_saving WHERE "
                        + "iban_id='" + recIban + "' ";

                //Vzimame kodoveta na valytite
                rs = NewClass.Vrazka.st.executeQuery(orderer);
                rs.next();
                orderCode = rs.getString("exchange_rate_id");
                orderBalance = Double.parseDouble(rs.getString("balance"));
                rs.close();

                rs = NewClass.Vrazka.st.executeQuery(recipient);
                rs.next();
                recipientCode = rs.getString("exchange_rate_id");
                recipientBalance = Double.parseDouble(rs.getString("balance"));
                rs.close();

                //Vzimane na  dannite za kyrs i obraten kyrs za dvete smetki
                rs = NewClass.Vrazka.st.executeQuery("SELECT * from exchange_rate WHERE "
                        + "code_id='" + orderCode + "'; ");
                rs.next();

                orderRate = Double.parseDouble(rs.getString("rate"));
                orderRate /= Double.parseDouble(rs.getString("ratio"));
                orderReverseRate = Double.parseDouble(rs.getString("reverse_rate"));
                rs.close();

                rs = NewClass.Vrazka.st.executeQuery("SELECT * from exchange_rate WHERE "
                        + "code_id='" + recipientCode + "' ;");
                rs.next();

                recipientRate = Double.parseDouble(rs.getString("rate"));
                recipientRate /= Double.parseDouble(rs.getString("ratio"));
                recipientReverseRate = Double.parseDouble(rs.getString("reverse_rate"));

                double test = Double.parseDouble(amountField1.getText());
                sum = amountField1.getText();

                if (orderBalance >= test) {
                    checkSum = true;
                }
                System.out.println(checkSum);

                if (orderCode.equals(recipientCode)) {
                    if (checkSum == true) {
                        String ordererDel = "UPDATE account_type_current SET balance=balance-'" + sum + "' WHERE "
                                + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                        NewClass.Vrazka.st.executeUpdate(ordererDel);

                        String transaction = "UPDATE account_type_saving SET balance=balance+'" + sum + "' WHERE "
                                + "iban_id='" + recIban + "' ";
                        NewClass.Vrazka.st.executeUpdate(transaction);

                        String transactionInsertinto = "INSERT INTO transaction_list_current_saving (execution_time, "
                                + "orderer_account_type_current_id, orderer_customer_list_id, basis, amount ,"
                                + "exchange_rate_id ,recipient_account_type_saving_id) VALUES (SYSDATETIME() ,"
                                + " '" + orderIban + "' , '" + egn + "', '" + basis + "' , '" + sum + "' , '" + orderCode + "' ,"
                                + " '" + recIban + "')";
                        NewClass.Vrazka.st.execute(transactionInsertinto);
                        JOptionPane.showMessageDialog(null, " Transaction complited!  ");
                        Review_profile.Update_Current_Table();
                        Review_profile.Update_Saving_table();

                        String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                                + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                                + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                        NewClass.Vrazka.st.execute(history);

                        try {
                            PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                            out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " to " + recIban + ".");
                            out.flush();
                        } catch (Exception ex) {
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, " Balance not enought! ");
                    }
                } else {
                    if (orderCode.equals("BGN")) {
                        double total = recipientReverseRate * Double.parseDouble(amountField1.getText());

                        String ordererDel = "UPDATE account_type_current SET balance=balance-'" + sum + "' WHERE "
                                + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                        NewClass.Vrazka.st.executeUpdate(ordererDel);

                        String transaction = "UPDATE account_type_saving SET balance=balance+'" + total + "' WHERE "
                                + "iban_id='" + recIban + "' ";
                        NewClass.Vrazka.st.executeUpdate(transaction);

                        String transactionInsert = "INSERT INTO transaction_list_current_saving (execution_time, "
                                + "orderer_account_type_current_id, orderer_customer_list_id, basis, amount ,"
                                + "exchange_rate_id ,recipient_account_type_current_id) VALUES (SYSDATETIME() ,"
                                + " '" + orderIban + "' , '" + egn + "', '" + basis + "' , '" + sum + "' , '" + orderCode + "' ,"
                                + " '" + recIban + "')";
                        NewClass.Vrazka.st.execute(transactionInsert);

                        JOptionPane.showMessageDialog(null, " Transaction complited! ");
                        Review_profile.Update_Current_Table();
                        Review_profile.Update_Saving_table();

                        String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                                + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                                + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                        NewClass.Vrazka.st.execute(history);

                        try {
                            PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                            out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " to " + recIban + ".");
                            out.flush();
                        } catch (Exception ex) {
                        }
                    } else {
                        if (recipientCode.equals("BGN")) {
                            double total = orderRate * Double.parseDouble(amount1.getText());

                            String ordererDel = "UPDATE account_type_current SET balance=balance-'" + sum + "' WHERE "
                                    + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                            NewClass.Vrazka.st.executeUpdate(ordererDel);

                            String transaction = "UPDATE account_type_saving SET balance=balance+'" + total + "' WHERE "
                                    + "iban_id='" + recIban + "' ";
                            NewClass.Vrazka.st.executeUpdate(transaction);
                            JOptionPane.showMessageDialog(null, " Transaction complited! 3 ");
                            Review_profile.Update_Current_Table();
                            Review_profile.Update_Saving_table();

                            String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                                    + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                                    + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                            NewClass.Vrazka.st.execute(history);

                            try {
                                PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                                out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " to " + recIban + ".");
                                out.flush();
                            } catch (Exception ex) {
                            }
                        } else {
                            double levaBuff;
                            levaBuff = orderRate * Double.parseDouble(amount1.getText());

                            String ordererDel = "UPDATE account_type_current SET balance=balance-'" + levaBuff + "' WHERE "
                                    + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                            NewClass.Vrazka.st.executeUpdate(ordererDel);

                            String transaction = "UPDATE account_type_saving SET balance=balance+'" + levaBuff + "' WHERE "
                                    + "iban_id='" + recIban + "' ";
                            NewClass.Vrazka.st.executeUpdate(transaction);
                            JOptionPane.showMessageDialog(null, " Transaction complited! 4 ");
                            Review_profile.Update_Current_Table();
                            Review_profile.Update_Saving_table();

                            String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                                    + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                                    + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                            NewClass.Vrazka.st.execute(history);

                            try {
                                PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                                out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " to " + recIban + ".");
                                out.flush();
                            } catch (Exception ex) {
                            }
                        }
                    }
                }
            } else {
                String orderer2 = "SELECT balance, exchange_rate_id FROM account_type_saving WHERE "
                        + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";

                String recipient2 = "SELECT balance,exchange_rate_id FROM account_type_current WHERE "
                        + "iban_id='" + recIban + "' ";

                //Vzimame kodoveta na valytite
                rs = NewClass.Vrazka.st.executeQuery(orderer2);
                rs.next();
                orderCode = rs.getString("exchange_rate_id");
                orderBalance = Double.parseDouble(rs.getString("balance"));
                rs.close();

                rs = NewClass.Vrazka.st.executeQuery(recipient2);
                rs.next();
                recipientCode = rs.getString("exchange_rate_id");
                recipientBalance = Double.parseDouble(rs.getString("balance"));
                rs.close();

                //Vzimane na  dannite za kyrs i obraten kyrs za dvete smetki
                rs = NewClass.Vrazka.st.executeQuery("SELECT * from exchange_rate WHERE "
                        + "code_id='" + orderCode + "'; ");
                rs.next();

                orderRate = Double.parseDouble(rs.getString("rate"));
                orderRate /= Double.parseDouble(rs.getString("ratio"));
                orderReverseRate = Double.parseDouble(rs.getString("reverse_rate"));
                rs.close();

                rs = NewClass.Vrazka.st.executeQuery("SELECT * from exchange_rate WHERE "
                        + "code_id='" + recipientCode + "' ;");
                rs.next();

                recipientRate = Double.parseDouble(rs.getString("rate"));
                recipientRate /= Double.parseDouble(rs.getString("ratio"));
                recipientReverseRate = Double.parseDouble(rs.getString("reverse_rate"));

                double test = Double.parseDouble(amountField1.getText());
                sum = amountField1.getText();

                if (orderBalance >= test) {
                    checkSum = true;
                }
                if (orderCode.equals(recipientCode)) {
                    if (checkSum == true) {
                        String ordererDel = "UPDATE account_type_saving SET balance=balance-'" + sum + "' WHERE "
                                + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                        NewClass.Vrazka.st.executeUpdate(ordererDel);

                        String transaction = "UPDATE account_type_current SET balance=balance+'" + sum + "' WHERE "
                                + "iban_id='" + recIban + "' ";
                        NewClass.Vrazka.st.executeUpdate(transaction);
                        Review_profile.Update_Current_Table();
                        Review_profile.Update_Saving_table();

                        String transactionInsertinto = "INSERT INTO transaction_list_saving_current (execution_time, "
                                + "orderer_account_type_saving_id, orderer_customer_list_id, basis, amount ,"
                                + "exchange_rate_id ,recipient_account_type_current_id) VALUES (SYSDATETIME() ,"
                                + " '" + orderIban + "' , '" + egn + "', '" + basis + "' , '" + sum + "' , '" + orderCode + "' ,"
                                + " '" + recIban + "')";
                        NewClass.Vrazka.st.execute(transactionInsertinto);
                        JOptionPane.showMessageDialog(null, " Transaction complited!  ");

                        String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                                + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                                + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                        NewClass.Vrazka.st.execute(history);

                        try {
                            PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                            out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " to " + recIban + ".");
                            out.flush();
                        } catch (Exception ex) {
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, " Balance not enought! ");
                    }
                } else {
                    if (orderCode.equals("BGN")) {
                        double total = recipientReverseRate * Double.parseDouble(amountField1.getText());

                        String ordererDel = "UPDATE account_type_saving SET balance=balance-'" + sum + "' WHERE "
                                + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                        NewClass.Vrazka.st.executeUpdate(ordererDel);

                        String transaction = "UPDATE account_type_current SET balance=balance+'" + total + "' WHERE "
                                + "iban_id='" + recIban + "' ";
                        NewClass.Vrazka.st.executeUpdate(transaction);

                        String transactionInsert = "INSERT INTO transaction_list_saving_current (execution_time, "
                                + "orderer_account_type_current_id, orderer_customer_list_id, basis, amount ,"
                                + "exchange_rate_id ,recipient_account_type_current_id) VALUES (SYSDATETIME() ,"
                                + " '" + orderIban + "' , '" + egn + "', '" + basis + "' , '" + sum + "' , '" + orderCode + "' ,"
                                + " '" + recIban + "')";
                        NewClass.Vrazka.st.execute(transactionInsert);

                        JOptionPane.showMessageDialog(null, " Transaction complited! ");
                        Review_profile.Update_Current_Table();
                        Review_profile.Update_Saving_table();

                        String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                                + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                                + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                        NewClass.Vrazka.st.execute(history);

                        try {
                            PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                            out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " to " + recIban + ".");
                            out.flush();
                        } catch (Exception ex) {
                        }
                    } else {
                        if (recipientCode.equals("BGN")) {
                            double total = orderRate * Double.parseDouble(amount1.getText());

                            String ordererDel = "UPDATE account_type_saving SET balance=balance-'" + sum + "' WHERE "
                                    + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                            NewClass.Vrazka.st.executeUpdate(ordererDel);

                            String transaction = "UPDATE account_type_current SET balance=balance+'" + total + "' WHERE "
                                    + "iban_id='" + recIban + "' ";
                            NewClass.Vrazka.st.executeUpdate(transaction);
                            JOptionPane.showMessageDialog(null, " Transaction complited! 3 ");
                            Review_profile.Update_Current_Table();
                            Review_profile.Update_Saving_table();

                            String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                                    + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                                    + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                            NewClass.Vrazka.st.execute(history);

                            try {
                                PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                                out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " to " + recIban + ".");
                                out.flush();
                            } catch (Exception ex) {
                            }
                        } else {
                            double levaBuff;
                            levaBuff = orderRate * Double.parseDouble(amount1.getText());

                            String ordererDel = "UPDATE account_type_saving SET balance=balance-'" + levaBuff + "' WHERE "
                                    + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                            NewClass.Vrazka.st.executeUpdate(ordererDel);

                            String transaction = "UPDATE account_type_current SET balance=balance+'" + levaBuff + "' WHERE "
                                    + "iban_id='" + recIban + "' ";
                            NewClass.Vrazka.st.executeUpdate(transaction);
                            JOptionPane.showMessageDialog(null, " Transaction complited! 4 ");
                            Review_profile.Update_Current_Table();
                            Review_profile.Update_Saving_table();

                            String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                                    + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                                    + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                            NewClass.Vrazka.st.execute(history);

                            try {
                                PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                                out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " to " + recIban + ".");
                                out.flush();
                            } catch (Exception ex) {
                            }
                        }
                    }
                }
            }
            rs.close();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_transaction1ActionPerformed

    private void close1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_close1ActionPerformed

    private void withDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withDrawActionPerformed
        try {
            String orderCode, recipientCode;
            double orderBalance = 0.0;
            boolean checkSum = false;

            String orderIban = OrderIbanField2.getText().trim();
            String egn = ordererEgn2.getText().trim();
            String sum = amountField2.getText().trim();

            String orderer = "SELECT balance, exchange_rate_id FROM account_type_current WHERE "
                    + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
            rs = NewClass.Vrazka.st.executeQuery(orderer);

            int count = 0;
            while (rs.next()) {
                count = count + 1;
            }
            if (count == 1) {
                //Vzimame kodoveta na valytata
                rs = NewClass.Vrazka.st.executeQuery(orderer);
                rs.next();
                orderCode = rs.getString("exchange_rate_id");
                orderBalance = Double.parseDouble(rs.getString("balance"));
                rs.close();

                double test = Double.parseDouble(amountField2.getText());
                sum = amountField2.getText();

                if (orderBalance >= test) {
                    checkSum = true;
                }
                if (checkSum == true) {
                    String ordererDel = "UPDATE account_type_current SET balance=balance-'" + sum + "' WHERE "
                            + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                    NewClass.Vrazka.st.executeUpdate(ordererDel);

                    String transactionInsertWithDraw = "INSERT INTO transaction_list_current (execution_time, "
                            + "orderer_account_type_current_id, orderer_customer_list_id, amount ,"
                            + "exchange_rate_id ,basis) VALUES (SYSDATETIME() ,"
                            + " '" + orderIban + "' , '" + egn + "' , '" + sum + "' , '" + orderCode + "' , '-')";
                    NewClass.Vrazka.st.execute(transactionInsertWithDraw);
                    JOptionPane.showMessageDialog(null, " Transaction complited!  ");
                    Review_profile.Update_Current_Table();

                    String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                            + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                            + "'has made withdraw for: " + orderIban + "', SYSDATETIME()) ";
                    NewClass.Vrazka.st.execute(history);

                    try {
                        PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                        out.println("employee: "+LogIn.getEmployeeID() + " has made withdraw for: " + orderIban + ".");
                        out.flush();
                    } catch (Exception ex) {
                    }
                } else {
                    JOptionPane.showMessageDialog(null, " Balance not enought! ");
                }
            } else {
                System.out.println("tuk sme");
                String test2 = "SELECT balance, exchange_rate_id FROM account_type_saving WHERE "
                        + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                rs = NewClass.Vrazka.st.executeQuery(test2);
                rs.next();
                orderCode = rs.getString("exchange_rate_id");
                orderBalance = Double.parseDouble(rs.getString("balance"));
                rs.close();

                double test = Double.parseDouble(amountField2.getText());
                sum = amountField2.getText();

                if (orderBalance >= test) {
                    checkSum = true;
                }
                if (checkSum == true) {
                    String ordererDel = "UPDATE account_type_saving SET balance=balance-'" + sum + "' WHERE "
                            + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                    NewClass.Vrazka.st.executeUpdate(ordererDel);

                    String transactionInsertWithDraw = "INSERT INTO transaction_list_saving (execution_time, "
                            + "orderer_account_type_saving_id, orderer_customer_list_id, amount ,"
                            + "exchange_rate_id ,basis) VALUES (SYSDATETIME() ,"
                            + " '" + orderIban + "' , '" + egn + "' , '" + sum + "' , '" + orderCode + "', '-')";
                    NewClass.Vrazka.st.execute(transactionInsertWithDraw);
                    JOptionPane.showMessageDialog(null, " Transaction saving complited!  ");
                    Review_profile.Update_Saving_table();

                    try {
                        PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                        out.println("employee: "+LogIn.getEmployeeID() + " has made withdraw for: " + orderIban + ".");
                        out.flush();
                    } catch (Exception ex) {
                    }
                } else {
                    JOptionPane.showMessageDialog(null, " Balance not enought! ");
                }
            }
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_withDrawActionPerformed

    private void close2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_close2ActionPerformed

    private void insertCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertCashActionPerformed
        try {
            String orderCode, recipientCode;
            double orderBalance = 0.0;
            boolean checkSum = true;

            String orderIban = OrderIbanField3.getText().trim();
            String egn = ordererEgn3.getText().trim();
            String sum = amountField3.getText().trim();

            String orderer = "SELECT balance, exchange_rate_id FROM account_type_current WHERE "
                    + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
            rs = NewClass.Vrazka.st.executeQuery(orderer);

            int count = 0;
            while (rs.next()) {
                count = count + 1;
            }
            if (count == 1) {
                //Vzimame kodoveta na valytata
                rs = NewClass.Vrazka.st.executeQuery(orderer);
                rs.next();
                orderCode = rs.getString("exchange_rate_id");
                orderBalance = Double.parseDouble(rs.getString("balance"));
                rs.close();

                double test = Double.parseDouble(amountField3.getText());
                sum = amountField3.getText();
                if (checkSum == true) {
                    String ordererDel = "UPDATE account_type_current SET balance=balance+'" + sum + "' WHERE "
                            + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                    NewClass.Vrazka.st.executeUpdate(ordererDel);

                    String transactionInsertWithDraw = "INSERT INTO transaction_list_current (execution_time, "
                            + "orderer_account_type_current_id, orderer_customer_list_id, amount ,"
                            + "exchange_rate_id ,basis ) VALUES (SYSDATETIME() ,"
                            + " '" + orderIban + "' , '" + egn + "' , '" + sum + "' , '" + orderCode + "', '+')";
                    NewClass.Vrazka.st.execute(transactionInsertWithDraw);
                    JOptionPane.showMessageDialog(null, " Transaction complited!  ");

                    String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                            + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                            + "'has made income withdraw for: " + orderIban + "', SYSDATETIME()) ";
                    NewClass.Vrazka.st.execute(history);
                    Review_profile.Update_Current_Table();

                    try {
                        PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                        out.println("employee: "+LogIn.getEmployeeID() + " has made income withdraw for: " + orderIban + ".");
                        out.flush();
                    } catch (Exception ex) {
                    }
                }
            } else {
                System.out.println("tuk sme");
                String test2 = "SELECT balance, exchange_rate_id FROM account_type_saving WHERE "
                        + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                rs = NewClass.Vrazka.st.executeQuery(test2);
                rs.next();
                orderCode = rs.getString("exchange_rate_id");
                orderBalance = Double.parseDouble(rs.getString("balance"));
                rs.close();

                double test = Double.parseDouble(amountField3.getText());
                sum = amountField3.getText();

                if (orderBalance >= test) {
                    checkSum = true;
                }
                if (checkSum == true) {
                    String ordererDel = "UPDATE account_type_saving SET balance=balance+'" + sum + "' WHERE "
                            + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                    NewClass.Vrazka.st.executeUpdate(ordererDel);

                    String transactionInsertWithDraw = "INSERT INTO transaction_list_saving (execution_time, "
                            + "orderer_account_type_saving_id, orderer_customer_list_id, amount ,"
                            + "exchange_rate_id ,basis) VALUES (SYSDATETIME() ,"
                            + " '" + orderIban + "' , '" + egn + "' , '" + sum + "' , '" + orderCode + "','+')";
                    NewClass.Vrazka.st.execute(transactionInsertWithDraw);
                    JOptionPane.showMessageDialog(null, " Transaction saving complited!  ");
                    Review_profile.Update_Saving_table();

                    try {
                        PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                        out.println("employee: "+LogIn.getEmployeeID() + " has made income withdraw for: " + orderIban + ".");
                        out.flush();
                    } catch (Exception ex) {
                    }
                }
            }
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_insertCashActionPerformed

    private void close3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_close3ActionPerformed

    private void transaction2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transaction2ActionPerformed
        try {
            String orderCode, recipientCode;
            double orderRate, recipientRate, orderReverseRate, recipientReverseRate, orderBalance = 0.0,
                    recipientBalance = 0.0;
            boolean checkSum = false;

            String orderIban = OrderIbanField4.getText().trim();
            String egn = ordererEgn4.getText().trim();
            String basis = basisArea2.getText().trim();
            String sum = amountField4.getText().trim();
            String recIban = recipienIbanField2.getText().trim();

            String orderer2 = "SELECT balance, exchange_rate_id FROM account_type_deposit WHERE "
                    + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";

            String recipient2 = "SELECT balance,exchange_rate_id FROM account_type_current WHERE "
                    + "iban_id='" + recIban + "' ";

            //Vzimame kodoveta na valytite
            rs = NewClass.Vrazka.st.executeQuery(orderer2);
            rs.next();
            orderCode = rs.getString("exchange_rate_id");
            orderBalance = Double.parseDouble(rs.getString("balance"));
            rs.close();

            rs = NewClass.Vrazka.st.executeQuery(recipient2);
            rs.next();
            recipientCode = rs.getString("exchange_rate_id");
            recipientBalance = Double.parseDouble(rs.getString("balance"));
            rs.close();

            //Vzimane na  dannite za kyrs i obraten kyrs za dvete smetki
            rs = NewClass.Vrazka.st.executeQuery("SELECT * from exchange_rate WHERE "
                    + "code_id='" + orderCode + "'; ");
            rs.next();

            orderRate = Double.parseDouble(rs.getString("rate"));
            orderRate /= Double.parseDouble(rs.getString("ratio"));
            orderReverseRate = Double.parseDouble(rs.getString("reverse_rate"));
            rs.close();

            rs = NewClass.Vrazka.st.executeQuery("SELECT * from exchange_rate WHERE "
                    + "code_id='" + recipientCode + "' ;");
            rs.next();

            recipientRate = Double.parseDouble(rs.getString("rate"));
            recipientRate /= Double.parseDouble(rs.getString("ratio"));
            recipientReverseRate = Double.parseDouble(rs.getString("reverse_rate"));

            double test = Double.parseDouble(amountField4.getText());
            sum = amountField4.getText();

            if (orderBalance >= test) {
                checkSum = true;
            }
            if (orderCode.equals(recipientCode)) {
                if (checkSum == true) {
                    String ordererDel = "UPDATE account_type_deposit SET balance=balance-'" + sum + "' WHERE "
                            + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                    NewClass.Vrazka.st.executeUpdate(ordererDel);

                    String transaction = "UPDATE account_type_current SET balance=balance+'" + sum + "' WHERE "
                            + "iban_id='" + recIban + "' ";
                    NewClass.Vrazka.st.executeUpdate(transaction);
                    Review_profile.Update_Current_Table();
                    Review_profile.Update_Deposit_table();

                    String transactionInsertinto = "INSERT INTO transaction_list_deposit_current (execution_time, "
                            + "orderer_account_type_deposit_id, orderer_customer_list_id, basis, amount ,"
                            + "exchange_rate_id ,recipient_account_type_current_id) VALUES (SYSDATETIME() ,"
                            + " '" + orderIban + "' , '" + egn + "', '" + basis + "' , '" + sum + "' , '" + orderCode + "' ,"
                            + " '" + recIban + "')";
                    NewClass.Vrazka.st.execute(transactionInsertinto);
                    JOptionPane.showMessageDialog(null, " Transaction complited!  ");

                    String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                            + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                            + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                    NewClass.Vrazka.st.execute(history);

                    try {
                        PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                        out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " and " + recIban + ".");
                        out.flush();
                    } catch (Exception ex) {
                    }
                } else {
                    JOptionPane.showMessageDialog(null, " Balance not enought! ");
                }
            } else {
                if (orderCode.equals("BGN")) {
                    double total = recipientReverseRate * Double.parseDouble(amountField4.getText());

                    String ordererDel = "UPDATE account_type_deposit SET balance=balance-'" + sum + "' WHERE "
                            + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                    NewClass.Vrazka.st.executeUpdate(ordererDel);

                    String transaction = "UPDATE account_type_current SET balance=balance+'" + total + "' WHERE "
                            + "iban_id='" + recIban + "' ";
                    NewClass.Vrazka.st.executeUpdate(transaction);

                    String transactionInsert = "INSERT INTO transaction_list_deposit_current (execution_time, "
                            + "orderer_account_type_deposit_id, orderer_customer_list_id, basis, amount ,"
                            + "exchange_rate_id ,recipient_account_type_current_id) VALUES (SYSDATETIME() ,"
                            + " '" + orderIban + "' , '" + egn + "', '" + basis + "' , '" + sum + "' , '" + orderCode + "' ,"
                            + " '" + recIban + "')";
                    NewClass.Vrazka.st.execute(transactionInsert);

                    JOptionPane.showMessageDialog(null, " Transaction complited! ");
                    Review_profile.Update_Current_Table();
                    Review_profile.Update_Deposit_table();
                    
                    try {
                        PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                        out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " and " + recIban + ".");
                        out.flush();
                    } catch (Exception ex) {
                    }

                    String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                            + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                            + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                    NewClass.Vrazka.st.execute(history);
                } else {
                    if (recipientCode.equals("BGN")) {
                        double total = orderRate * Double.parseDouble(amountField4.getText());

                        String ordererDel = "UPDATE account_type_deposit SET balance=balance-'" + sum + "' WHERE "
                                + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                        NewClass.Vrazka.st.executeUpdate(ordererDel);

                        String transaction = "UPDATE account_type_current SET balance=balance+'" + total + "' WHERE "
                                + "iban_id='" + recIban + "' ";
                        NewClass.Vrazka.st.executeUpdate(transaction);
                        JOptionPane.showMessageDialog(null, " Transaction complited! 3 ");
                        Review_profile.Update_Current_Table();
                        Review_profile.Update_Deposit_table();

                        String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                                + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                                + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                        NewClass.Vrazka.st.execute(history);

                        try {
                            PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                            out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " and " + recIban + ".");
                            out.flush();
                        } catch (Exception ex) {
                        }
                    } else {
                        double levaBuff;
                        levaBuff = orderRate * Double.parseDouble(amountField4.getText());

                        String ordererDel = "UPDATE account_type_deposit SET balance=balance-'" + levaBuff + "' WHERE "
                                + "iban_id='" + orderIban + "' and customer_list_id='" + egn + "' ";
                        NewClass.Vrazka.st.executeUpdate(ordererDel);

                        String transaction = "UPDATE account_type_current SET balance=balance+'" + levaBuff + "' WHERE "
                                + "iban_id='" + recIban + "' ";
                        NewClass.Vrazka.st.executeUpdate(transaction);
                        JOptionPane.showMessageDialog(null, " Transaction complited! 4 ");
                        Review_profile.Update_Current_Table();
                        Review_profile.Update_Deposit_table();

                        String history = "INSERT INTO employee_history (employee_username_id, action_description, "
                                + "action_time) VALUES ('" + LogIn.getEmployeeID() + "', "
                                + "'has made transactions between " + orderIban + " and " + recIban + " ', SYSDATETIME()) ";
                        NewClass.Vrazka.st.execute(history);

                        try {
                            PrintWriter out = new PrintWriter(new OutputStreamWriter(Messages.Svurzvane.connection.getOutputStream()));
                            out.println("employee: "+LogIn.getEmployeeID() + " has made transactions between " + orderIban + " and " + recIban + ".");
                            out.flush();
                        } catch (Exception ex) {
                        }
                    }
                }
            }

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            ex.printStackTrace();
        }


    }//GEN-LAST:event_transaction2ActionPerformed

    private void close4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_close4ActionPerformed

    private void enableMenu(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_enableMenu
        Review_profile.jMenuBar1.setEnabled(true);
        Review_profile.closeAcc.setEnabled(true);
        Review_profile.Block.setEnabled(true);
        Review_profile.jButton2.setEnabled(true);
        Review_profile.jMenu2.setEnabled(true);
        Review_profile.jMenu1.setEnabled(true);
    }//GEN-LAST:event_enableMenu

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField OrderIbanField;
    private javax.swing.JTextField OrderIbanField1;
    private javax.swing.JTextField OrderIbanField2;
    private javax.swing.JTextField OrderIbanField3;
    private javax.swing.JTextField OrderIbanField4;
    private javax.swing.JLabel amount;
    private javax.swing.JLabel amount1;
    private javax.swing.JLabel amount2;
    private javax.swing.JLabel amount3;
    private javax.swing.JLabel amount4;
    private javax.swing.JTextField amountField;
    private javax.swing.JTextField amountField1;
    private javax.swing.JTextField amountField2;
    private javax.swing.JTextField amountField3;
    private javax.swing.JTextField amountField4;
    private javax.swing.JLabel basis;
    private javax.swing.JLabel basis1;
    private javax.swing.JLabel basis2;
    private javax.swing.JTextArea basisArea;
    private javax.swing.JTextArea basisArea1;
    private javax.swing.JTextArea basisArea2;
    private javax.swing.JButton close;
    private javax.swing.JButton close1;
    private javax.swing.JButton close2;
    private javax.swing.JButton close3;
    private javax.swing.JButton close4;
    private javax.swing.JButton insertCash;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel order;
    private javax.swing.JLabel order1;
    private javax.swing.JLabel order2;
    private javax.swing.JLabel order3;
    private javax.swing.JLabel order4;
    private javax.swing.JTextField ordererEgn;
    private javax.swing.JTextField ordererEgn1;
    private javax.swing.JTextField ordererEgn2;
    private javax.swing.JTextField ordererEgn3;
    private javax.swing.JTextField ordererEgn4;
    private javax.swing.JTextField recipienIbanField;
    private javax.swing.JTextField recipienIbanField1;
    private javax.swing.JTextField recipienIbanField2;
    private javax.swing.JButton transaction;
    private javax.swing.JButton transaction1;
    private javax.swing.JButton transaction2;
    private javax.swing.JButton withDraw;
    // End of variables declaration//GEN-END:variables
}
